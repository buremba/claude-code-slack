{{- if .Values.postgresql.enabled }}
{{- if not .Values.postgresql.external.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "peerbot.fullname" . }}-postgresql-user-manager
  labels:
    {{- include "peerbot.labels" . | nindent 4 }}
data:
  create-user.sh: |
    #!/bin/bash
    set -euo pipefail
    
    # Environment variables expected:
    # POSTGRES_HOST, POSTGRES_PORT, POSTGRES_DB
    # POSTGRES_ADMIN_USER, POSTGRES_ADMIN_PASSWORD
    # NEW_USERNAME, NEW_PASSWORD
    
    echo "Creating PostgreSQL user: ${NEW_USERNAME}"
    
    # Connect as admin and create user with limited privileges
    PGPASSWORD="${POSTGRES_ADMIN_PASSWORD}" psql \
      -h "${POSTGRES_HOST}" \
      -p "${POSTGRES_PORT}" \
      -U "${POSTGRES_ADMIN_USER}" \
      -d "${POSTGRES_DB}" \
      -c "
      DO \$\$
      BEGIN
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '${NEW_USERNAME}') THEN
          CREATE ROLE \"${NEW_USERNAME}\" WITH LOGIN PASSWORD '${NEW_PASSWORD}';
          GRANT CONNECT ON DATABASE \"${POSTGRES_DB}\" TO \"${NEW_USERNAME}\";
          GRANT USAGE ON SCHEMA public TO \"${NEW_USERNAME}\";
          GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO \"${NEW_USERNAME}\";
          GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO \"${NEW_USERNAME}\";
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO \"${NEW_USERNAME}\";
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT USAGE, SELECT ON SEQUENCES TO \"${NEW_USERNAME}\";
          
          -- Create Row Level Security policy to isolate users by tenant_id
          -- Users can only access rows where tenant_id matches their username pattern
          CREATE POLICY \"${NEW_USERNAME}_policy\" ON conversations
            FOR ALL TO \"${NEW_USERNAME}\"
            USING (tenant_id = REGEXP_REPLACE('${NEW_USERNAME}', '^user_(.+)_(.+)\$', '\\1-\\2'));
          
          CREATE POLICY \"${NEW_USERNAME}_workspace_policy\" ON workspaces
            FOR ALL TO \"${NEW_USERNAME}\"
            USING (tenant_id = REGEXP_REPLACE('${NEW_USERNAME}', '^user_(.+)_(.+)\$', '\\1-\\2'));
            
          RAISE NOTICE 'User ${NEW_USERNAME} created successfully';
        ELSE
          RAISE NOTICE 'User ${NEW_USERNAME} already exists';
        END IF;
      END
      \$\$;
      "
    
    echo "User ${NEW_USERNAME} setup completed"

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "peerbot.fullname" . }}-postgresql-init
  labels:
    {{- include "peerbot.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgresql-init
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/component: postgresql-init
    spec:
      restartPolicy: OnFailure
      containers:
      - name: postgresql-init
        image: postgres:15-alpine
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Wait for PostgreSQL to be ready
          until PGPASSWORD="${POSTGRES_ADMIN_PASSWORD}" psql -h "${POSTGRES_HOST}" -U "${POSTGRES_ADMIN_USER}" -d "${POSTGRES_DB}" -c '\q'; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          
          # Enable Row Level Security on tables
          PGPASSWORD="${POSTGRES_ADMIN_PASSWORD}" psql \
            -h "${POSTGRES_HOST}" \
            -U "${POSTGRES_ADMIN_USER}" \
            -d "${POSTGRES_DB}" \
            -c "
            ALTER TABLE IF EXISTS conversations ENABLE ROW LEVEL SECURITY;
            ALTER TABLE IF EXISTS workspaces ENABLE ROW LEVEL SECURITY;
            "
          
          echo "PostgreSQL initialization completed"
        env:
        - name: POSTGRES_HOST
          value: {{ include "peerbot.fullname" . }}-postgresql
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: {{ .Values.postgresql.auth.database | quote }}
        - name: POSTGRES_ADMIN_USER
          value: {{ .Values.postgresql.auth.username | quote }}
        - name: POSTGRES_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "peerbot.fullname" . }}-postgresql-auth
              key: postgres-password
        volumeMounts:
        - name: user-manager-scripts
          mountPath: /scripts
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: user-manager-scripts
        configMap:
          name: {{ include "peerbot.fullname" . }}-postgresql-user-manager
          defaultMode: 0755
      - name: tmp
        emptyDir: {}
{{- end }}
{{- end }}