# Default values for peerbot Helm chart
# This is a YAML-formatted file.

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []

# Dispatcher (Slack event handler) configuration
dispatcher:
  replicaCount: 1
  useOperator: false  # Set to true to use Claude Operator instead of direct job management (recommended)
  
  image:
    repository: peerbot-dispatcher
    tag: latest
    pullPolicy: Always
  
  service:
    type: NodePort
    port: 3000
    targetPort: 3000
  
  # Resource limits for GKE Autopilot
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 1000m
      memory: 2Gi
  
  # Environment-specific configuration
  config:
    logLevel: INFO
    nodeEnv: production
  
  # Health checks
  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /ready
      port: 8080
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

# Worker (ephemeral job) configuration
worker:
  image:
    repository: claude-worker
    tag: latest
    pullPolicy: Always
  
  # Optimized resources for worker jobs (reduced by ~50%)
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 1500m
      memory: 3Gi
  
  # Job settings
  job:
    timeoutSeconds: 300  # 5 minutes
    ttlSecondsAfterFinished: 300  # Clean up after 5 minutes
    backoffLimit: 0  # No retries
  
  # Workspace configuration
  workspace:
    sizeLimit: 10Gi

# Slack configuration
slack:
  # Socket mode vs HTTP mode
  socketMode: true
  port: 3000
  
  # Bot configuration
  triggerPhrase: "@peerbotai"
  
  # Permissions
  allowDirectMessages: true
  allowPrivateChannels: false
  
  # Rate limiting and features
  enableStatusReactions: true
  enableProgressUpdates: true

# GitHub configuration
github:
  organization: "peerbot-community"

# Storage: Using in-memory session storage only

# Claude configuration
claude:
  # Default Claude options
  timeoutMinutes: "5"
  
# Session management
session:
  timeoutMinutes: 5

# Kubernetes configuration
kubernetes:
  namespace: default

# Service Account and RBAC
serviceAccount:
  create: true
  name: claude-worker
  annotations:
    # For GKE Workload Identity
    iam.gke.io/gcp-service-account: claude-code-bot@your-project.iam.gserviceaccount.com

rbac:
  create: true

# Secrets management
secrets:
  # These should be set via Helm values or external secret management
  slackBotToken: ""
  slackSigningSecret: ""
  githubToken: ""

# ConfigMap data
config:
  # Non-sensitive configuration
  gcsBucketName: "peerbot-conversations-prod"
  gcsProjectId: ""
  githubOrganization: "peerbot-community"
  sessionTimeoutMinutes: "5"

# Ingress configuration (optional)
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: peerbot.example.com
      paths:
        - path: /
          pathType: Prefix
  tls: []

# Claude Operator configuration
operator:
  enabled: false  # Enable to use Claude Operator for session management
  
  image:
    repository: claude-operator
    tag: latest
    pullPolicy: Always
  
  replicaCount: 1
  
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  
  # Health checks
  livenessProbe:
    httpGet:
      path: /healthz
      port: 8081
    initialDelaySeconds: 30
    periodSeconds: 30
  
  readinessProbe:
    httpGet:
      path: /readyz
      port: 8081
    initialDelaySeconds: 15
    periodSeconds: 10
  
  # Environment-specific configuration
  config:
    logLevel: INFO
    namespace: ""  # Defaults to chart namespace

# Monitoring and observability
monitoring:
  enabled: false
  serviceMonitor:
    enabled: false
  
# Autoscaling (for dispatcher only)
autoscaling:
  enabled: false  # Disabled in favor of KEDA
  minReplicas: 0  # Scale to zero when idle
  maxReplicas: 1
  targetCPUUtilizationPercentage: 50  # Lower threshold for quicker scale-up
  targetMemoryUtilizationPercentage: 70
  # Scale down behavior - aggressive for scale-to-zero
  scaleDown:
    stabilizationWindowSeconds: 300  # 5 minutes stability before scaling down
    percent: 100  # Can scale down 100% (to zero)
    pods: 1  # Scale down 1 pod at a time
    periodSeconds: 60  # Check every minute
  # Scale up behavior - quick response
  scaleUp:
    stabilizationWindowSeconds: 0  # No delay for scaling up
    percent: 100  # Can double the pods
    pods: 2  # Or add 2 pods at once
    periodSeconds: 15  # Check every 15 seconds

# KEDA autoscaling (alternative to HPA, better for scale-to-zero)
keda:
  enabled: true  # Enable KEDA for true scale-to-zero
  pollingInterval: 30  # Check every 30 seconds
  cooldownPeriod: 300  # 5 minutes before scaling to zero
  idleReplicaCount: 0  # Scale to zero when idle
  minReplicaCount: 0
  maxReplicaCount: 1
  triggers:
    cpu:
      utilizationPercentage: 50
    memory:
      utilizationPercentage: 70
    # Example Prometheus trigger for custom metrics
    prometheus:
      serverAddress: http://prometheus:9090
      metricName: slack_messages_pending
      threshold: "1"
      query: sum(rate(slack_messages_received_total[1m]))

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  dispatcher:
    minAvailable: 1
    # maxUnavailable: 1  # Alternative to minAvailable
  worker:
    # minAvailable: 1
    maxUnavailable: "50%"

# Node selector and tolerations
nodeSelector: {}
tolerations: []
affinity: {}

# Spot instance configuration for workers
workerNodeSelector:
  cloud.google.com/gke-spot: "true"
workerTolerations:
  - key: cloud.google.com/gke-spot
    operator: Equal
    value: "true"
    effect: NoSchedule

# Pod security context
podSecurityContext:
  fsGroup: 1001
  runAsNonRoot: true
  runAsUser: 1001

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1001
  capabilities:
    drop:
      - ALL

# Security Policies
networkPolicy:
  enabled: true
  defaultDeny: false  # Set to true for default deny-all policy

resourceQuota:
  enabled: true
  requests:
    cpu: "1"      # Reduced from 2
    memory: "2Gi" # Reduced from 4Gi
    storage: "20Gi" # Reduced from 50Gi
  limits:
    cpu: "2"      # Reduced from 4
    memory: "4Gi" # Reduced from 8Gi
  counts:
    pods: 20
    jobs: 15
    configmaps: 10
    secrets: 100
    services: 5
    pvcs: 5
    loadbalancers: 1
    nodeports: 0
  storageClass: ""  # Optional: restrict to specific storage class

workerQuota:
  enabled: true
  requests:
    cpu: "0.5"    # Reduced from 1
    memory: "1Gi" # Reduced from 2Gi
  limits:
    cpu: "1.5"    # Reduced from 2
    memory: "3Gi" # Reduced from 4Gi
  counts:
    pods: 10
    jobs: 8

limitRange:
  enabled: true
  container:
    default:
      cpu: "500m"
      memory: "1Gi"
      storage: "5Gi"
    defaultRequest:
      cpu: "100m"
      memory: "256Mi"
      storage: "1Gi"
    max:
      cpu: "2"
      memory: "4Gi"
      storage: "20Gi"
    min:
      cpu: "10m"
      memory: "32Mi"
      storage: "100Mi"
    maxLimitRequestRatio:
      cpu: 10
      memory: 4
  pod:
    max:
      cpu: "2"
      memory: "4Gi"
      storage: "20Gi"
    min:
      cpu: "10m"
      memory: "32Mi"
  pvc:
    max:
      storage: "100Gi"
    min:
      storage: "1Gi"
  worker:
    default:
      cpu: "500m"    # Reduced from 1
      memory: "1Gi"  # Reduced from 2Gi
      storage: "5Gi" # Reduced from 10Gi
    defaultRequest:
      cpu: "100m"    # Reduced from 200m
      memory: "256Mi" # Reduced from 512Mi
      storage: "1Gi"  # Reduced from 2Gi
    max:
      cpu: "1.5"     # Reduced from 2
      memory: "3Gi"  # Reduced from 4Gi
      storage: "10Gi" # Reduced from 20Gi
    min:
      cpu: "50m"
      memory: "128Mi"
      storage: "500Mi"
    maxLimitRequestRatio:
      cpu: 5
      memory: 3

podSecurityPolicy:
  enabled: false  # Deprecated in K8s 1.21+, removed in 1.25+

podSecurityStandards:
  enabled: true  # For K8s 1.23+
  enforce: "restricted"
  audit: "restricted"
  warn: "restricted"