# Claude Code Slack Application Configuration
# Copy this file to .env and fill in your values

# ===========================================
# INFRASTRUCTURE CONFIGURATION (Required)
# ===========================================

# Infrastructure mode: "kubernetes" for production, "docker" for local development
INFRASTRUCTURE_MODE=docker

# Docker-specific configuration (when INFRASTRUCTURE_MODE=docker)
DOCKER_SOCKET_PATH=/var/run/docker.sock
WORKSPACE_HOST_DIR=/tmp/claude-workspaces
DOCKER_NETWORK=claude-network
DOCKER_REMOVE_CONTAINERS=true

# Kubernetes-specific configuration (when INFRASTRUCTURE_MODE=kubernetes)
KUBERNETES_NAMESPACE=default

# Worker configuration (applies to both modes)
WORKER_IMAGE=claude-worker:latest
WORKER_CPU=1000m
WORKER_MEMORY=2Gi
WORKER_TIMEOUT_SECONDS=300

# ===========================================
# SLACK CONFIGURATION (Required)
# ===========================================

# Bot User OAuth Token (starts with xoxb-)
# Get this from your Slack app's "OAuth & Permissions" page
SLACK_BOT_TOKEN=xoxb-your-bot-token-here

# App-Level Token (starts with xapp-) - Required for Socket Mode
# Get this from your Slack app's "Basic Information" page
SLACK_APP_TOKEN=xapp-your-app-token-here

# Signing Secret - Required for request verification
# Get this from your Slack app's "Basic Information" page  
SLACK_SIGNING_SECRET=your-signing-secret-here

# ===========================================
# SLACK APPLICATION SETTINGS
# ===========================================

# Bot User ID (optional, will auto-detect if not provided)
SLACK_BOT_USER_ID=U1234567890

# Trigger phrase for non-mention messages (default: @bot)
SLACK_TRIGGER_PHRASE=@claude

# Use HTTP mode instead of Socket Mode (default: false)
# Set to true if you need to receive events via HTTP instead of WebSocket
SLACK_HTTP_MODE=false

# Port for HTTP mode (default: 3000)
PORT=3000

# ===========================================
# PERMISSIONS AND ACCESS CONTROL
# ===========================================

# Allow direct messages (default: true)
SLACK_ALLOW_DIRECT_MESSAGES=true

# Allow private channels/groups (default: false)
SLACK_ALLOW_PRIVATE_CHANNELS=false

# Comma-separated list of allowed user IDs (optional)
# If set, only these users can trigger the bot
SLACK_ALLOWED_USERS=U1234567890,U0987654321

# Comma-separated list of blocked user IDs (optional)
SLACK_BLOCKED_USERS=

# Comma-separated list of allowed channel IDs (optional)
# If set, bot only responds in these channels
SLACK_ALLOWED_CHANNELS=C1234567890,C0987654321

# Comma-separated list of blocked channel IDs (optional)
SLACK_BLOCKED_CHANNELS=

# ===========================================
# CLAUDE CONFIGURATION (Required)
# ===========================================

# Anthropic API Key for Claude
ANTHROPIC_API_KEY=sk-ant-your-anthropic-api-key-here

# Alternative: Claude Code OAuth Token
# CLAUDE_CODE_OAUTH_TOKEN=your-oauth-token-here

# ===========================================
# CLAUDE EXECUTION SETTINGS
# ===========================================

# Maximum number of conversation turns (default: 20)
MAX_TURNS=20

# Execution timeout in minutes (default: 10)
TIMEOUT_MINUTES=10

# Claude model to use (default: claude-3-5-sonnet-20241022)
MODEL=claude-3-5-sonnet-20241022

# Fallback model if primary model fails
FALLBACK_MODEL=claude-3-haiku-20240307

# System prompt for Claude (optional)
SYSTEM_PROMPT=

# Additional system prompt to append (optional)
APPEND_SYSTEM_PROMPT=

# Custom instructions for all interactions (optional)
CUSTOM_INSTRUCTIONS=

# ===========================================
# TOOL CONFIGURATION
# ===========================================

# Comma-separated list of additional allowed tools (optional)
ALLOWED_TOOLS=

# Comma-separated list of disallowed tools (optional)
DISALLOWED_TOOLS=

# ===========================================
# FEATURE FLAGS
# ===========================================

# Enable emoji status reactions on user messages (default: true)
ENABLE_STATUS_REACTIONS=true

# Enable real-time progress updates (default: true)
ENABLE_PROGRESS_UPDATES=true

# Include GitHub file operations for code work (default: false)
INCLUDE_GITHUB_FILE_OPS=false

# ===========================================
# GITHUB INTEGRATION (Optional)
# ===========================================

# GitHub token for file operations and repository management
GITHUB_TOKEN=ghp_your-github-token-here

# GitHub organization where repositories will be created
GITHUB_ORGANIZATION=your-organization-name

# ===========================================
# STORAGE CONFIGURATION (Optional)
# ===========================================

# Google Cloud Storage bucket for conversation logs and artifacts
GCS_BUCKET_NAME=your-bucket-name

# Path to GCS service account key file
GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json

# Google Cloud project ID
GOOGLE_CLOUD_PROJECT=your-project-id

# Session timeout (in minutes)
SESSION_TIMEOUT_MINUTES=5

# ===========================================
# ENVIRONMENT AND LOGGING
# ===========================================

# Node environment (development, production)
NODE_ENV=development

# Log level (DEBUG, INFO, WARN, ERROR)
LOG_LEVEL=INFO

# ===========================================
# ADVANCED CONFIGURATION
# ===========================================

# Custom MCP configuration path (optional)
MCP_CONFIG_PATH=

# Custom environment variables for Claude execution (optional)
# Format: KEY1: value1\nKEY2: value2
CLAUDE_ENV=

# ===========================================
# EXAMPLES AND HELP
# ===========================================

# Example allowed tools:
# ALLOWED_TOOLS=WebSearch,WebFetch

# Example disallowed tools:
# DISALLOWED_TOOLS=Bash

# Example custom instructions:
# CUSTOM_INSTRUCTIONS=Always explain your reasoning and provide code examples when relevant.

# Example Claude environment variables:
# CLAUDE_ENV=DEBUG: true\nVERBOSE: true

# ===========================================
# GETTING STARTED
# ===========================================

# 1. Create a Slack app at https://api.slack.com/apps
# 2. Enable Socket Mode and generate an App-Level Token
# 3. Add the bot to your workspace and copy the Bot User OAuth Token
# 4. Copy the Signing Secret from Basic Information
# 5. Fill in the required values above
# 6. Run: bun run dev:slack